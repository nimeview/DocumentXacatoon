use image::{DynamicImage, ImageFormat};
use std::io::Cursor;

fn create_image_from_binary(binary_data: Vec<u8>) -> DynamicImage {
    let cursor = Cursor::new(binary_data);

    let image = image::load(cursor, ImageFormat::Png)
        .expect("Failed to load image from binary data");

    image
}

pub fn test() {
    let binary_data: Vec<u8> = vec![137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,80,0,0,0,166,8,6,0,0,0,77,218,8,169,0,0,3,33,73,68,65,84,120,1,237,192,3,160,36,89,150,198,241,255,119,238,141,200,204,167,114,75,99,174,109,219,182,109,219,182,109,219,182,109,105,140,158,150,74,175,158,50,51,34,238,249,118,183,106,122,166,135,59,107,213,175,62,244,161,15,53,87,253,91,81,185,234,223,131,202,85,255,30,84,174,250,247,160,46,22,11,174,250,55,163,114,213,191,7,117,185,92,114,213,191,25,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,234,98,177,224,170,127,51,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,212,229,114,201,85,255,102,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,202,85,255,30,84,174,250,247,160,114,213,191,7,149,171,254,61,168,92,245,239,65,229,170,127,15,42,87,253,123,80,185,234,223,131,127,4,183,185,9,254,53,14,53,213,0,0,0,0,73,69,78,68,174,66,96,130];

    let image = create_image_from_binary(binary_data);

    image.save("restored_image.png").expect("Failed to save image");
}